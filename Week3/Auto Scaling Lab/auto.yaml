AWSTemplateFormatVersion: "2010-09-09"
Description: 'Auto Scaling Lab - Dynamic Scaling of Apache Web Servers with CPU-based Scaling'

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
  
  AllowedSSHCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: IP CIDR range allowed for SSH access (recommend restricting to your IP)
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: Latest Amazon Linux 2 AMI from Systems Manager Parameter Store

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: AutoScaling-VPC
      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC 
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ASG-Public-Subnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC 
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ASG-Public-Subnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ASG-Private-Subnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ASG-Private-Subnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: ASG-InternetGateway

  AttachedGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ASG-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachedGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Public1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  Public2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
    
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachedGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ASG-NAT-EIP
      
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: ASG-NAT

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ASG-PrivateRouteTable
  
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
    
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSHCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ASG-BastionSG

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from ALB and SSH from Bastion
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ASG-WebServerSG

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic from the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ASG-ALBSG
  
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref BastionSecurityGroup
          SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: ASG-BastionHost

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ASG-LoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: ASG-ALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      Matcher:
        HttpCode: 200-299
      Tags:
        - Key: Name
          Value: ASG-TargetGroup

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ASG-LaunchTemplate
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Update packages
            yum update -y
            yum install -y httpd stress php amazon-cloudwatch-agent

            # Start Apache and enable it on boot
            systemctl start httpd
            systemctl enable httpd

            # Get instance metadata
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
            PRIVATE_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4)

            # Create HTML content
            cat > /var/www/html/index.html << EOF
            <!DOCTYPE html>
            <html>
            <head>
                <title>Auto Scaling Lab</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        margin: 0;
                        padding: 20px;
                        background-color: #f5f5f5;
                    }
                    .container {
                        max-width: 800px;
                        margin: 0 auto;
                        background-color: white;
                        padding: 20px;
                        border-radius: 5px;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }
                    h1 {
                        color: #333;
                    }
                    .info {
                        margin: 20px 0;
                        padding: 15px;
                        background-color: #e8f4f8;
                        border-left: 4px solid #4a90e2;
                    }
                    button {
                        padding: 10px 15px;
                        background-color: #4a90e2;
                        color: white;
                        border: none;
                        border-radius: 5px;
                        cursor: pointer;
                    }
                    button:hover {
                        background-color: #3a7bc8;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Auto Scaling Lab Demo</h1>
                    <div class="info">
                        <p><strong>Instance IP:</strong> $PRIVATE_IP</p>
                        <p><strong>Instance ID:</strong> $INSTANCE_ID</p>
                    </div>
                    <p>Click the button below to stress the CPU of this instance.</p>
                    <button onclick="stressCPU()">Stress CPU</button>
                    <div id="status"></div>
                </div>

                <script>
                    function stressCPU() {
                        var status = document.getElementById('status');
                        status.innerHTML = 'Stressing CPU for 60 seconds...';
                        
                        fetch('/stress.php')
                            .then(response => {
                                console.log('Stress process started');
                                setTimeout(function() {
                                    status.innerHTML = 'CPU stress test completed! Check CloudWatch for scaling actions.';
                                }, 60000);
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                status.innerHTML = 'Error occurred during stress test!';
                            });
                    }
                </script>
            </body>
            </html>
            EOF

            # Create PHP file to handle stress test
            cat > /var/www/html/stress.php << 'EOF'
            <?php
            // Start the stress process
            shell_exec("stress --cpu 1 --timeout 60 > /dev/null 2>&1 &");
            echo "Stress process started";
            ?>
            EOF

            # Set proper permissions
            chown -R apache:apache /var/www/html
            chmod -R 755 /var/www/html

            # Restart Apache to apply changes
            systemctl restart httpd

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ASG-Lab-AutoScalingGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: ASG-WebServer
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: true

  CPUScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0
        DisableScaleIn: false

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: ASG-Lab-Dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${ASG}" ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "ASG - Average CPU Utilization"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${ALB.LoadBalancerFullName}" ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "ALB - Request Count"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/AutoScaling", "GroupInServiceInstances", "AutoScalingGroupName", "${ASG}" ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "ASG - In-Service Instances"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${ALB.LoadBalancerFullName}" ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "ALB - Target Response Time"
              }
            }
          ]
        }

Outputs:
  LoadBalancerURL:
    Description: URL of the deployed ALB
    Value: !Sub http://${ALB.DNSName}
  
  BastionIP:
    Description: Public IP Address of the Bastion Host
    Value: !GetAtt BastionHost.PublicIp
  
  DashboardURL:
    Description: URL for the CloudWatch Dashboard
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Dashboard}
  
  SSHCommand:
    Description: Command to SSH into the Bastion Host
    Value: !Sub ssh -i ${KeyName}.pem ec2-user@${BastionHost.PublicIp}