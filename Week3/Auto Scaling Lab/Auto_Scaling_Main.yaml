AWSTemplateFormatVersion: '2010-09-09'
Description: 'Auto Scaling Lab - Dynamic Scaling of Apache Web Servers'

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: Week3KeyPair
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ASG-Lab-VPC

  # Public Subnet 1 (for ALB)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-2a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ASG-Lab-PublicSubnet1

  # Public Subnet 2 (for ALB)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-2b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ASG-Lab-PublicSubnet2

  # Private Subnet (for ASG)
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-2a
      Tags:
        - Key: Name
          Value: ASG-Lab-PrivateSubnet

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ASG-Lab-IGW

  # Attach Internet Gateway to VPC
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ASG-Lab-PublicRouteTable

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Route Table with Public Subnets
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # EIP for NAT Gateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ASG-Lab-NAT-EIP

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: ASG-Lab-NAT

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ASG-Lab-PrivateRouteTable

  # Private Route
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Associate Private Route Table with Private Subnet
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from ALB and SSH from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ASG-Lab-InstanceSG

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic from the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ASG-Lab-ALBSG

  # Application Load Balancer (ALB)
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ASG-Lab-ALB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: ASG-Lab-ALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ASG-Lab-TG
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      Tags:
        - Key: Name
          Value: ASG-Lab-TargetGroup

  # IAM Role for EC2 instances to access CloudWatch
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: /

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ASG-Lab-LaunchTemplate
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: ami-000089c8d02060104
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64: |
          #!/bin/bash
          # Update packages
          yum update -y
          yum install -y httpd stress-ng bc
            
          # Start Apache and enable it on boot
          systemctl start httpd
          systemctl enable httpd
          
          # Enhanced UI for the index page
          echo "<html><head><title>Auto Scaling Lab</title>" > /var/www/html/index.html
          echo "<style>" >> /var/www/html/index.html
          echo "body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; text-align: center; margin: 50px; background-color: #f4f4f4; }" >> /var/www/html/index.html
          echo "h1 { color: #333; }" >> /var/www/html/index.html
          echo "button { background-color: #007bff; border: none; color: white; padding: 15px 32px; text-align: center; " >> /var/www/html/index.html
          echo "text-decoration: none; display: inline-block; font-size: 16px; margin: 10px 2px; cursor: pointer; border-radius: 5px; transition: 0.3s; }" >> /var/www/html/index.html
          echo "button:hover { background-color: #0056b3; }" >> /var/www/html/index.html
          echo ".container { max-width: 600px; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); margin: auto; }" >> /var/www/html/index.html
          echo ".info { background-color: #e9ecef; padding: 10px; margin-bottom: 15px; border-left: 5px solid #007bff; text-align: left; }" >> /var/www/html/index.html
          echo "progress { width: 100%; height: 20px; }" >> /var/www/html/index.html
          echo "</style></head><body>" >> /var/www/html/index.html
          
          # Get instance info
          INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          
          # Add content with instance info
          echo "<div class='container'>" >> /var/www/html/index.html
          echo "<h1>Auto Scaling Lab Demo</h1>" >> /var/www/html/index.html
          echo "<div class='info'>" >> /var/www/html/index.html
          echo "<h2>Instance Info</h2>" >> /var/www/html/index.html
          echo "<p><strong>IP Address:</strong> ${INSTANCE_IP}</p>" >> /var/www/html/index.html
          echo "<p><strong>Instance ID:</strong> ${INSTANCE_ID}</p>" >> /var/www/html/index.html
          echo "</div>" >> /var/www/html/index.html
          
          echo "<h3>CPU Stress Test</h3>" >> /var/www/html/index.html
          echo "<p>Click below to start a CPU load test. The Auto Scaling Group will respond if CPU utilization exceeds 50%.</p>" >> /var/www/html/index.html
          echo "<button onclick=\"stressTest()\">Start Stress Test</button>" >> /var/www/html/index.html
          echo "<p id='status'></p>" >> /var/www/html/index.html
          echo "<p id='currentCPU'></p>" >> /var/www/html/index.html
          
          # JavaScript to trigger stress test and show CPU usage
          cat >> /var/www/html/index.html << 'EOF'
          <script>
          function stressTest() {
            document.getElementById("status").innerHTML = "Running CPU stress test...";
            document.getElementById("status").style.color = "#ff6600";
            startCPUMonitoring();
            fetch('/stress.cgi')
              .then(response => response.text())
              .then(data => console.log(data))
              .catch(error => console.error('Error:', error));
          }

          function startCPUMonitoring() {
            const intervalId = setInterval(() => {
              fetch('/cpu.cgi')
                .then(response => response.text())
                .then(data => {
                  document.getElementById("currentCPU").innerHTML = "CPU Usage: " + data + "%";
                  if (parseFloat(data) > 50) {
                    document.getElementById("currentCPU").style.color = "#ff0000";
                  } else {
                    document.getElementById("currentCPU").style.color = "#333";
                  }
                })
                .catch(error => console.error('Error:', error));
            }, 5000);
            setTimeout(() => {
              clearInterval(intervalId);
              document.getElementById("status").innerHTML = "Test completed.";
              document.getElementById("status").style.color = "#4CAF50";
            }, 240000);
          }
          </script>
          </div></body></html>
          EOF
          
          # Restart Apache to apply changes
          systemctl restart httpd

          

  # Auto Scaling Group (ASG)
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ASG-Lab-AutoScalingGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: AutoScalingGroup-Lab-Instance
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: true

  # Scale Out Policy
  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: "30"

  # CloudWatch Alarm to trigger Scale Out
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ASG-Lab-HighCPUAlarm
      AlarmDescription: Scale out if CPU > 50% for 1 consecutive period of 30 seconds
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 30
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleOutPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASG

Outputs:
  LoadBalancerURL:
    Description: URL of the deployed ALB
    Value: !Join [ "", [ "http://", !GetAtt ALB.DNSName ] ]

  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  PublicSubnets:
    Description: Public Subnets (comma separated)
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]

  PrivateSubnet:
    Description: Private Subnet
    Value: !Ref PrivateSubnet