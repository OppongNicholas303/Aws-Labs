AWSTemplateFormatVersion: "2010-09-09"
Description: 'Auto Scaling Lab - Dynamic Scaling of Apache Web Servers with Improved Architecture'

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: Week3KeyPair
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
  
  AllowedSSHCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: IP CIDR range allowed for SSH access (recommend restricting to your IP)
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  #VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: AutoScalingGroup-VPC
      
  #Public subnet 1 for ALB
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC 
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ASG-Lab-PublicSubnet1

  #Public subnet 2 for ALB
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC 
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ASG-Lab-PublicSubnet2

  #Private subnet 1 for ASG
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ASG-Lab-PrivateSubnet1

  #Private subnet 2 for ASG
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC 
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ASG-Lab-PrivateSubnet2

  #Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: ASG-Lab-InternetGateway

  #Attached InternetGateway to VPC
  AttachedGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #Route table for public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ASG-Lab-PublicRouteTable

  #Public Route in the Route table
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachedGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #Associate the route table with the public subnets
  Public1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  Public2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
    
  #EIP For NATGateway
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachedGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AutoScaling-NAT-EIP
      
  #NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: AutoScaling-NAT

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AutoScaling-PrivateRouteTable
  
  # Private Route
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
    
  # Associate Private Route Table with Private Subnets
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSHCidr
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: AutoScaling-BastionSG

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from ALB and SSH from Bastion
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: AutoScaling-InstanceSG

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic from the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: AutoScaling-Lab-ALBSG
  
  # Bastion Host
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0f9c44e98edf38a2b # Amazon Linux 2 in us-east-1
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref BastionSecurityGroup
          SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: ASG-Lab-BastionHost

  # Application Load Balancer (ALB)
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AutoScaling-ALB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: AutoScaling-Lab-ALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: AutoScaling-TG
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      Tags:
        - Key: Name
          Value: AutoScaling-TargetGroup

  # IAM Role for EC2 instances to access CloudWatch
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: AutoScaling-LaunchTemplate
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: ami-0f9c44e98edf38a2b # Amazon Linux 2 in us-east-1
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64: |
            #!/bin/bash
            # Update packages
            yum update -y
            yum install -y httpd stress-ng amazon-cloudwatch-agent

            # Start Apache and enable it on boot
            systemctl start httpd
            systemctl enable httpd
            
            # Create basic index page with instance info
            echo "<html><head><title>Auto Scaling Lab</title></head><body>" > /var/www/html/index.html
            echo "<h1>Hello from $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4) / $(curl -s http://169.254.169.254/latest/meta-data/instance-id)</h1>" >> /var/www/html/index.html
            echo "<p><button onclick=\"stressTest()\">Stress CPU</button></p>" >> /var/www/html/index.html
            echo "<p id=\"status\"></p>" >> /var/www/html/index.html
            
            # Add JavaScript to trigger stress test
            cat >> /var/www/html/index.html << 'EOF'
            <script>
            function stressTest() {
              document.getElementById("status").innerHTML = "Stressing CPU for 60 seconds...";
              fetch('/stress.cgi')
                .then(response => response.text())
                .then(data => {
                  console.log(data);
                  setTimeout(function() {
                    document.getElementById("status").innerHTML = "CPU stress test completed!";
                  }, 60000);
                })
                .catch(error => {
                  console.error('Error:', error);
                  document.getElementById("status").innerHTML = "Error occurred during stress test!";
                });
            }
            </script>
            </body></html>
            EOF
            
            # Create CGI directory
            mkdir -p /var/www/cgi-bin/
            
            # Create CGI script to trigger stress-ng
            cat > /var/www/cgi-bin/stress.cgi << 'EOF'
            #!/bin/bash
            echo "Content-type: text/plain"
            echo ""
            echo "Stressing CPU..."
            # Run stress-ng with 1 CPU worker for 60 seconds
            nohup stress-ng --cpu 1 --timeout 60s > /dev/null 2>&1 &
            EOF
            
            # Make CGI script executable
            chmod +x /var/www/cgi-bin/stress.cgi
            
            # Configure Apache to execute CGI scripts
            cat > /etc/httpd/conf.d/cgi.conf << 'EOF'
            ScriptAlias /stress.cgi "/var/www/cgi-bin/stress.cgi"
            <Directory "/var/www/cgi-bin">
                AllowOverride None
                Options +ExecCGI
                AddHandler cgi-script .cgi
                Require all granted
            </Directory>
            EOF
            
            # Configure log rotation for Apache
            cat > /etc/logrotate.d/httpd << 'EOF'
            /var/log/httpd/*log {
                daily
                missingok
                rotate 14
                compress
                delaycompress
                notifempty
                create 640 root adm
                sharedscripts
                postrotate
                    /bin/systemctl reload httpd.service > /dev/null 2>/dev/null || true
                endscript
            }
            EOF
            
            # Create CloudWatch agent configuration file with proper instance ID
            instanceId=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
            {
              "agent": {
                "metrics_collection_interval": 60,
                "run_as_user": "root"
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/httpd/access_log",
                        "log_group_name": "ASG-Lab-Apache-AccessLogs",
                        "log_stream_name": "{instance_id}-access",
                        "retention_in_days": 14
                      },
                      {
                        "file_path": "/var/log/httpd/error_log",
                        "log_group_name": "ASG-Lab-Apache-ErrorLogs",
                        "log_stream_name": "{instance_id}-error",
                        "retention_in_days": 14
                      }
                    ]
                  }
                }
              },
              "metrics": {
                "append_dimensions": {
                  "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                  "ImageId": "${!aws:ImageId}",
                  "InstanceId": "${!aws:InstanceId}",
                  "InstanceType": "${!aws:InstanceType}"
                },
                "metrics_collected": {
                  "cpu": {
                    "measurement": [
                      "cpu_usage_idle",
                      "cpu_usage_iowait",
                      "cpu_usage_user",
                      "cpu_usage_system"
                    ],
                    "metrics_collection_interval": 10,
                    "totalcpu": true
                  },
                  "disk": {
                    "measurement": [
                      "used_percent",
                      "inodes_free"
                    ],
                    "metrics_collection_interval": 60,
                    "resources": [
                      "/"
                    ]
                  },
                  "mem": {
                    "measurement": [
                      "mem_used_percent",
                      "mem_available",
                      "mem_total"
                    ],
                    "metrics_collection_interval": 10
                  },
                  "netstat": {
                    "measurement": [
                      "tcp_established",
                      "tcp_time_wait"
                    ],
                    "metrics_collection_interval": 60
                  },
                  "swap": {
                    "measurement": [
                      "swap_used_percent"
                    ],
                    "metrics_collection_interval": 60
                  }
                }
              }
            }
            EOF
            
            # Start the CloudWatch agent
            systemctl enable amazon-cloudwatch-agent
            systemctl start amazon-cloudwatch-agent
            
            # Restart Apache to apply changes
            systemctl restart httpd

  # Auto Scaling Group (ASG)
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ASG-Lab-AutoScalingGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: ASG-Lab-Instance
          PropagateAtLaunch: true
      LifecycleHookSpecificationList:
        - DefaultResult: ABANDON
          HeartbeatTimeout: 300
          LifecycleHookName: ASG-Lab-TerminationHook
          LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: true

  # Scale Out Policy
  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0
        DisableScaleIn: false

  # Scheduled Scale Up (Business Hours)
  ScheduledScaleUpPolicy:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref ASG
      DesiredCapacity: 4
      MinSize: 3
      MaxSize: 6
      Recurrence: "0 8 * * 1-5"  # 8:00 AM Monday-Friday
      TimeZone: "Africa/Accra"

  # Scheduled Scale Down (After Hours)
  ScheduledScaleDownPolicy:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref ASG
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 6
      Recurrence: "0 18 * * 1-5"  # 6:00 PM Monday-Friday
      TimeZone: "Africa/Accra"

  # CloudWatch Dashboard
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: ASG-Lab-Dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${ASG}" ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "ASG - Average CPU Utilization"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${ALB.LoadBalancerFullName}" ]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "ALB - Request Count"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/AutoScaling", "GroupInServiceInstances", "AutoScalingGroupName", "${ASG}" ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "ASG - In-Service Instances"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${ALB.LoadBalancerFullName}" ]
                ],
                "period": 60,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "ALB - Target Response Time"
              }
            }
          ]
        }

  # Additional CloudWatch Alarms
  MemoryAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ASG-Lab-HighMemoryAlarm
      AlarmDescription: Alarm if memory usage exceeds 80% for 5 minutes
      MetricName: mem_used_percent
      Namespace: CWAgent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASG

  DiskSpaceAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ASG-Lab-HighDiskUsageAlarm
      AlarmDescription: Alarm if disk usage exceeds 85% for 5 minutes
      MetricName: disk_used_percent
      Namespace: CWAgent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASG
          
  # SNS Topic for Alarms
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ASG-Lab-Alarms

Outputs:
  LoadBalancerURL:
    Description: URL of the deployed ALB
    Value: !Join [ "", [ "http://", !GetAtt ALB.DNSName ] ]
  
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
  
  PublicSubnets:
    Description: Public Subnets (comma separated)
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
  
  PrivateSubnets:
    Description: Private Subnets (comma separated)
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]
  
  BastionIP:
    Description: IP Address of the Bastion Host
    Value: !GetAtt BastionHost.PublicIp
  
  DashboardURL:
    Description: URL for the CloudWatch Dashboard
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Dashboard}"